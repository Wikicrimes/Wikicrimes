<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html PUBLIC
"-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:c="http://java.sun.com/jstl/core"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:t="http://myfaces.apache.org/tomahawk">
	
	<f:loadBundle var="messages" basename="messages" />
	<script type="text/javascript"><!-- 
	/* <![CDATA[ */
			
			var arrayCrimesLatLng = new Array();
			var index = 0;
		    var zoomKernel;
		    var photo = new TPhoto();
			var northPixel;
			var southPixel;
			var eastPixel;
			var westPixel;
			var width;
			var height;
			
			var mapa =  '#{messages["webapp.nome.mapa.default"]}';
			var satelite = '#{messages["webapp.nome.mapa.satelite"]}';
			var hibrido = '#{messages["webapp.nome.mapa.hibrido"]}';
			var terreno = '#{messages["webapp.nome.mapa.terreno"]}';
			var kernelLabel = '#{messages["webapp.nome.mapa.zonasquentes"]}';
			var earth ="3D";
			var textoEmbedMapaWikiCrimes = '#{messages["texto.embed.mapa.wikicrimes"]}';
			var localeWikiCrimes = '#{messages["webapp.locale"]}'
			
		    var aindaCarregando = false;
		    var me;
		    var kernelLayer;
		    var kernelDiv;

		    var podeMudarModoKernel = true

			function ativaMapaKernel(){
			    if(!aindaCarregando && !kernelEnable){
				  	kernelEnable = true;
				  	selecionarComando(map, 'kernel');
				  	limpaCrimesAgrupador();
				  	document.getElementById("divTelaFiltro").style.visibility = "hidden";
				  	aindaCarregando = true;
				  	podeCarregarCrimes=true;
				  	if(statusLegenda=='visivel')
						wikicrimesDiv.innerHTML = htmlLegenda();
				  	atualizaDensidades();
					pintaMapaKernel();
				  	//comentar as 2 linhas abaixo pra desativar a funcionalidade de Areas de Risco
					if(!isJanelaAreaRiscoVisible())
				  		ativaMarcacaoHotspot();
			  	}	
			}

			function desativaMapaKernel(){
				removeHintComandosMapa();
				if(!aindaCarregando){
					kernelEnable = false;
					mostraCrimesAgrupador();
					selecionarComando(map, 'kernel', true);
					apagaMapaKernel();
					mostraMarcadores();
					podeCarregarCrimes=true;
					if(statusLegenda=='visivel')
						wikicrimesDiv.innerHTML = htmlLegenda();
					//comentar as 2 linhas abaixo pra desativar a funcionalidade de Areas de Risco
					if(!isJanelaAreaRiscoVisible())
						desativaMarcacaoHotspot();
				}
			}

			/*NAO TAVA USANDO
			function KernelLayer(map, opt_opts) {
			  var me = this;
			  me.map = map;  
			}
			
			KernelLayer.prototype.enable = function() {
			  	if(!aindaCarregando){
				  	this.enabled = true;
				  	//document.getElementById("loadingKernelMap").style.visibility='visible';		
				  	aindaCarregando = true;
				  	podeCarregarCrimes=false;
				  	//window.setTimeout(constroiMapaKernel,1);
				  	constroiMapaKernel(); 
			  	}
			}
			
			KernelLayer.prototype.disable = function() {
				if(!aindaCarregando){
					this.enabled = false;
					apagaMapaKernel();
					mostraMarcadores();
					podeCarregarCrimes=true;
				}  
			}
			
			KernelLayer.prototype.getEnabled = function() {
			  return this.enabled;
			}*/
			
			function crimeKernelMap(lng, lat, crimeMarker){
				this.lng = lng;
				this.lat = lat;
				this.crimeMarker = crimeMarker;
			}
			
			function zeraArrayCrimes(){
				arrayCrimesLatLng = new Array();
				index = 0;	
				apagaMapaKernel();
				desabilitaBotaoKernel();
			}
			
			function desabilitaBotaoKernel(){
				if (me != null && me.kernelLayer != null){
					me.kernelLayer.disable();
					me.toggleButton_(kernelDiv.firstChild, me.kernelLayer.getEnabled());
					aindaCarregando = false;		
				}
			}
			
			function apagaMapaKernel(){
				map.removeTPhoto(photo);
				if(!isJanelaAreaRiscoVisible())
					desmarcaHotspot();
			}
			
			function pintaMapaKernel(){
				exibeImagemMapaKernel();
				if(statusLegenda=='visivel'){
					atualizaLegendaKernel();
				}
			}
			
			function atualizaDensidades(){
				var url = constroiURLMapaKernel();
				var req = requisicaoGeraKernelMap(url);
				if (req.readyState == 4 && req.status == 200){
					req = pegaGridDensidades();
				}
				return req;
			}
			
			function constroiURLMapaKernel(){
				jaMostrouAjudaHotSpot = true;
				
				//Adiciona os parametros da requisição
				var url = 'acao=geraKernel';
				url += boundsUrlParam(map);
				url += pontosUrlParam();

				//console.log("url: " + url);
				return url;
			}

			function boundsUrlParam(map){
				var bounds = map.getBounds();
				var proj = map.getCurrentMapType().getProjection();
				var zoom = map.getZoom();

				//console.log("map: " + map + ", bounds: " + bounds + ", proj: " + proj);
				
				//Passa os limites para pixel
				var nePixel = latlngToPixel(bounds.getNorthEast());
				var swPixel = latlngToPixel(bounds.getSouthWest());
				northPixel = nePixel.y;
				southPixel = swPixel.y;
				eastPixel = nePixel.x;
				westPixel = swPixel.x;
				//alert(northPixel + "," + southPixel + "," + eastPixel + "," + westPixel);

				var str = '&northPixel=' + northPixel + '&southPixel=' + southPixel + '&eastPixel=' + eastPixel + '&westPixel=' + westPixel;
				//url += '&north=' + north + '&south=' + south + '&east=' + east + '&west=' + west;

				var size = sizePixel(bounds);
				width = size.width;
				height = size.height;
					      		
		      	str +='&width='+width+'&height='+height;

				//zoom
				str += '&zoom=' + zoom;
		      	/*teste console.log("width: " + width + ", height: " + height + 
				      	", east: " + eastPixel + ", west: " + westPixel + 
				      	", north: " + northPixel + ", south: " + southPixel +
				      	", c.x: " + centroPixel.x + ", c.y: " + centroPixel.y);/*teste*/
		      	return str;
			}

			function sizePixel(bounds){
				//returna um objeto contendo "width" e "height"

				//centro
				var centro = bounds.getCenter();
				var centroPixel = latlngToPixel(centro);

				//norte, sul, leste, oeste
				var nePixel = latlngToPixel(bounds.getNorthEast());
				var swPixel = latlngToPixel(bounds.getSouthWest());
				northPixel = nePixel.y;
				southPixel = swPixel.y;
				eastPixel = nePixel.x;
				westPixel = swPixel.x;

				//size válido desconsiderando o problema das emendas do mapa (linhas com latitude 0 e longitude 0)
				var width = (eastPixel - westPixel);
				var height = (southPixel - northPixel);

				/*teste
				console.log("width: " + width);
				console.log("height: " + height);
				console.log("eastPixel: " + eastPixel);
				console.log("westPixel: " + westPixel);
				console.log("southPixel: " + southPixel);
				console.log("northPixel: " + northPixel);
				/*teste*/

				//correção do size já considerando o problema das emendas
				if(width < 0){
					if(centroPixel.x < westPixel)
						width = 2*(eastPixel-centroPixel.x);
					else
						width = 2*(centroPixel.x-westPixel);
				}
				if(height < 0){
					if(centroPixel.y < southPixel)
						height = 2*(northPixel-centroPixel.y);
					else
						height = 2*(centroPixel.y-southPixel);
				}

				/*teste
				console.log("width: " + width);
				console.log("height: " + height);
				/*teste*/

				//empacota e retorna
				var size = {};
				size.width = width;
				size.height = height;
				return size;
			}

			function pontosUrlParam(){
				var str = '&pontoXY=';
				var arrayCrimesPixel = crimesTelaPixel();
				
				//Monta os parametros da requisiï¿½ï¿½o contendo todos os crimes clicados na tela
				for (i = 0; i < arrayCrimesPixel.length; i++){
					//Crimes sï¿½o adicionados como strings separados por "a" e os latlng separados por ","
					str += arrayCrimesPixel[i].lng + "," + arrayCrimesPixel[i].lat + "a";
				}
				if(arrayCrimesPixel.length > 0)
					str = str.substring(0, str.length-2);

				return str;
			}

			function pontosLatLngUrlParam(bounds){
				var str = "&pontosLatLng=";
				
				//Monta os parametros da requisiï¿½ï¿½o contendo todos os crimes clicados na tela
				var cont = 0;
				for (i=0; i < arrayCrimesLatLng.length; i++){
					//Crimes sï¿½o adicionados como strings separados por "|" e os latlng separados por ","
					var latlng = new GLatLng(arrayCrimesLatLng[i].lat, arrayCrimesLatLng[i].lng);
					if(bounds.containsLatLng(latlng)){
						str += latlng.lat() + "," + latlng.lng() + "|";
						cont++;
					}
				}
				if(str.charAt(str.length-1) == '|')
					str = str.substring(0, str.length-2);

				//console.log("pontosLatLngUrlParam(), cont: " + cont);   
				return str;
			}

			function requisicaoGeraKernelMap(url) {
				//alert("constroiRequisicaoRotaSegura()");
				//alert("constroiRequisicaoRotaSegura(), url=\n" + url);
				//alert("contrev: " + contrev);
			     http_request = GXmlHttp.create();
			     if (http_request.overrideMimeType) {
			        http_request.overrideMimeType('text/xml');
			     }
			     //Espera retorno do servidor
			     http_request.open('POST', 'ServletKernelMap', false);
				 http_request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
				 http_request.send(url);

				 return http_request;
			}
			
			function exibeImagemMapaKernel(){
				var bounds = map.getBounds();

				removeHintComandosMapa();//pra q mesmo?
				
				north = bounds.getNorthEast().lat();
				south = bounds.getSouthWest().lat();
				east = bounds.getNorthEast().lng();
				west = bounds.getSouthWest().lng();
				var lat1 = north;
				var lon1 = west;
				var lat2 = south;
				var lon2 = east;
						
				if (map.getZoom() == zoomKernel){
			  		aindaCarregando = false;

					photo = new TPhoto();
					photo.id = 'addphoto';
	
					//alert('exibeImagemMapaKernel');
					photo.src = "ServletKernelMap?acao=pegaImagem&nocache=" + new Date();
					photo.percentOpacity = IE? 50 : 100; //no IE, a imagem vem opaca, precisa de transparência aqui
					photo.anchorTopLeft = new GLatLng(lat1,lon1);
					photo.anchorBottomRight = new GLatLng(lat2,lon2);
			  		map.addTPhoto(photo);
			  	}else{
					console.log('zoom diferente no metodo exibeImagemMapaKernel()');
			  	}
			}


			function escondeMarcadores(){
				for (i = 0; i < arrayCrimesLatLng.length; i++){
					arrayCrimesLatLng[i].crimeMarker.hide();
				}
			}
			
			function mostraMarcadores(){
				for (i = 0; i < arrayCrimesLatLng.length; i++){
					arrayCrimesLatLng[i].crimeMarker.show();
				}
			}

			function limpaCrimesAgrupador(){
				// Google Agrupadores: Limpa agrupadores quando mapa de kernel Ã© chamado. 
				GVetorMarcadores = [];
				GClusterer.resetViewport();
				GClusterer.clearMarkers();		
			}

			function mostraCrimesAgrupador(){
				for (k in crimesAtuais) {
					GVetorMarcadores.push(crimesAtuais[k]);
			 	} 	
				GClusterer = new MarkerClusterer(map, GVetorMarcadores);
				//setTimeout(atualizaMapa, 1000);
			}		
			
			function crimesTelaPixel(){
			
				//Apaga o array de pixel
				arrayCrimesPixel = new Array();	
				
				//recupera o zoom atual
				zoomKernel = map.getZoom();
				bounds = map.getBounds();
				
				for (i=0, j=0; i < arrayCrimesLatLng.length; i++){
					//Convete o latlng em pixel
					var latlng = new GLatLng(arrayCrimesLatLng[i].lat, arrayCrimesLatLng[i].lng);
					var sw = map.getCurrentMapType().getProjection().fromLatLngToPixel(latlng, zoomKernel);
					
					arrayCrimesLatLng[i].crimeMarker.hide();
					
					pontoXPixel = sw.y; //Longitude (x)
					pontoYPixel = sw.x; //Latitude (y)

					//Só os crimes exibidos na tela atual								
					//if(westPixel <= pontoYPixel && eastPixel >= pontoYPixel && northPixel <= pontoXPixel && southPixel >= pontoXPixel){
					/*testeconsole.log(bounds.containsLatLng(latlng) + "; " +
							"bounds: " + bounds.getNorthEast() + ", " + bounds.getSouthWest() + "; " +
							"latlng: " + latlng.lat() + ", " + latlng.lng() );/*teste*/
					if(bounds.containsLatLng(latlng)){
						arrayCrimesPixel[j] = new crimeKernelMap(pontoXPixel, pontoYPixel);
						j++;
					}
				}

				//console.log("arrayCrimesPixel.length:"  + arrayCrimesPixel.length + ", arrayCrimesLatLng.length:"  + arrayCrimesLatLng.length);
				
				return arrayCrimesPixel;
			}


			//******************************************************************
			//INFORMAÇÕES DO MAPA DE KERNEL
			
			var gridDensidades;
			var nodeSize;
			var bandwidth;
			var densMax;
			var densMedia;
			var limiteDensHotspot; //limite a partir do qual um valor de densidade é considerado parte de hotspot
			var densLimiteInfKernel = .01; //se a densMax for menor que isso, o mapa de kernel não deve ser exibido (pra evitar hotspots de poucos crimes)
			var densLimiteSupMarcadores = .01;
			var zoomLimiteSupKernel = 15;
			var zoomLimiteInfMarcadores = 15;
			
			function pegaGridDensidades(){
				http_request = GXmlHttp.create();
				if (http_request.overrideMimeType)
					http_request.overrideMimeType('text/xml');
				http_request.open('POST', 'ServletKernelMap', false);
				http_request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
				http_request.send('acao=pegaInfo');
				
				if (http_request.readyState == 4 && http_request.status == 200) {
					var respostaString = http_request.responseText;
					gridDensidades = new Array();
					var linhas = respostaString.split('\n');

					//nodeSize e estatisticas
					nodeSize = parseInt(linhas[0]);
					bandwidth = parseInt(linhas[1]);
					densMax = parseFloat(linhas[2]);
					densMedia = parseFloat(linhas[3]);
					densMin = parseFloat(linhas[4]);
					limiteDensHotspot = 0.5 * densMax;

					//grid
					var comeco = 5; //indice da primeira linha que tem valores do grid
					for(var i=comeco; i<linhas.length; i++){
						var col = new Array(); //uma linha da resposta corresponde a uma coluna do grid de densidades
						var nums = linhas[i].split(',');
						for(var j=0; j<nums.length; j++){
							col[j] = parseFloat(nums[j]);
						}
						//alert('col: ' + col);
						gridDensidades[i-comeco] = col;
					}
					//alert('gridDensidades[10]: ' + gridDensidades[10]);
				} 

				return http_request;
			}


			

			//******************************************************************
			//LEGENDA 
			
			function htmlLegendaKernel(){
				
				var html = "<table cellpading='0' cellspacing='0' style='width:90px; padding:4px ;border:1px solid #333333; opacity: .99; -moz-opacity:0.99; filter: alpha(opacity=99); background-color:white;font-family:Arial, sans-serif;  font-size: 11px;'>";
				html+="     	<tr>";
				html+="     		<td align='center' colspan='2'> <b id='tituloLegenda'> #{messages['wikicrimes.legenda.densidade']}" +"</b> <img width='12px' height='12px' src='./images/maximizar.png' onclick='mostraEscondeLeganda();' style='font-size: 12px;cursor: pointer;'/> </td>";
				html+="         </tr>";
				html+="     	<tr align='left'>";
				html+="     		<td align='right'> <img style='width:20px; height:6em;' src='./images/gradiente.png' />";
				html+="     		<td align='left' id='valoresLegendaKernel' >";
				html+="					<table align='left' cellpading='0' cellspacing='0' style='padding:4px;'>";
				html+="     				<tr> <td> 0 </td> </tr>";
				html+="         			<tr> <td> &nbsp; </td></tr>";
				html+="     				<tr> <td> 0 </td> </tr>";
				html+="         			<tr> <td> &nbsp; </td></tr>";
				html+="     				<tr> <td> 0 </td> </tr>";
				html+="					</table>";
				html+="     		</td>";
				html+="         </tr>";
				html+="		</table>";

				return html;
			}

			function atualizaLegendaKernel(){

				var html="<table align='left' cellpading='0' cellspacing='0' style='padding:4px;'>";
				html+="	<tr> <td>"+ arredonda(densMax) + "</td> </tr>";
				html+="	<tr><td> &nbsp; </td></tr>";
				html+="	<tr> <td>"+ arredonda(0.5 * densMax) + "</td> </tr>";
				html+="	<tr><td> &nbsp; </td></tr>";
				html+="	<tr> <td>"+ arredonda(densMin) + "</td> </tr>";
				html+="</table>";
				
				var div = document.getElementById('valoresLegendaKernel');
				if(div)
					div.innerHTML = html;

			}

			function arredonda(num){
				return Math.round(10000*num)/100;
			}

			/*
			function densToMetros2(num){
				var pt1 = pixelToLatlng(new GPoint(0,0));
				var pt2 = pixelToLatlng(new GPoint(0,nodeSize));
				var pt3 = pixelToLatlng(new GPoint(nodeSize,nodeSize));
				var pt4 = pixelToLatlng(new GPoint(nodeSize,0)); 
				var poly = new GPolygon([pt1,pt2,pt3,pt4]);
				var latlngNodeSize = Math.sqrt( poly.getArea() );
				return arredonda( num/latlngNodeSize );
			}
			*/


			//******************************************************************
			//UTILIDADES

			function pixelToLatlng(pixel, zoom){
				if(zoom)
					return map.getCurrentMapType().getProjection().fromPixelToLatLng(pixel, zoom);
				else
					return map.getCurrentMapType().getProjection().fromPixelToLatLng(pixel, map.getZoom());
			}

			function latlngToPixel(latlng, zoom){
				if(zoom)
					return map.getCurrentMapType().getProjection().fromLatLngToPixel(latlng, zoom);
				else
					return map.getCurrentMapType().getProjection().fromLatLngToPixel(latlng, map.getZoom());
			}
			

			
    /* ]]> */
    --></script>	

</html>
